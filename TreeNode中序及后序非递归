//中序非递归
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ret;
        if(nullptr==root)
            return ret;
        TreeNode* cur=root;
        stack<TreeNode*> s;
        while(cur||!s.empty())
        {
            while(cur)
            {
                s.push(cur);
                cur=cur->left;
            }
            //上面while循环结束后，cur一定在空的位置
            //可以认为cur这颗子树已经遍历完成了
            //接下来遍历cur子树的根，根刚好在栈顶   
            cur=s.top();
            ret.push_back(cur->val );
            s.pop();
            //剩下cur的右子树，将右子树当做一棵新二叉树
            cur=cur->right;
        }
        return ret;
    }
};

//后序非递归
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ret;
        if(nullptr==root)
            return ret;
        TreeNode* cur=root;
        //用其标记刚刚遍历过得结点，防止右子树重复遍历，造成死循环
        TreeNode* prev=nullptr;
        stack<TreeNode*> s;
        while(cur||!s.empty())
        {
            //从根结点开始，将左侧路径中所有结点保存起来
            while(cur)
            {
                s.push(cur);
                cur=cur->left;
            }
            //cur处于空的位置，可以认为cur这颗子树被遍历了 
            //接下来遍历cur根的右子树
            //cur的根就在栈中 
            TreeNode* top=s.top();
            //如果top的右子树是空的，就可以遍历top了  
            if(nullptr==top->right||prev==top->right)
            {
                ret.push_back(top->val); 
                prev=top;
                s.pop();
            }
            else
            {
                //如果top的右子树非空，将其当做新的二叉树
                cur=top->right;
            }
        }
        return ret;
    }
};
