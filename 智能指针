# 智能指针

## RALL

资源获取即初始化——巧妙利用编译器会自动调用构造函数及析构函数的特性，来完成对资源的自动释放

**做法：**

在构造方法中，将资源放进去，让对象管理

在析构方法中，将资源释放掉

## 智能指针原理

所有智能指针的原理基本都是一样的

RALL+operator*()/operator->()+浅拷贝解决方案

RALL：能够保证资源可以被自动释放

operator*()/operator->()：可以保证对象能按照指针的方式来运行

浅拷贝解决方案：能保证资源不被释放多次而引起代码崩溃的问题

## auto_ptr

RALL+operator*()/operator->()+浅拷贝解决方案：**资源转移**

当发生拷贝或复制时，将被拷贝对象的资源转移给新对象，然后让被拷贝对象与资源断开联系

```C++
auto_ptr(auto_prt<T>& ap)
    :_ptr(ap._ptr)
{
    nullptr==ap._ptr;
}
```

## unique_ptr

RALL+operator*()/operator->()+浅拷贝解决方案：**禁止拷贝**

在C++11中，delete关键字功能扩展：

1.释放new申请的空间

2.用其修饰默认成员函数，表明编译器不会生成该函数

```C++
private：
	unique_str(const unique_str<T>&)=delete;
	unique_str<T>& operator=(const unique_str<T>&)=delete;
```

## shared_ptr

共享智能指针——多个对象之间共享资源

RALL+operator*()/operator->()+浅拷贝解决方案：**采用引用计数的方式**

引用计数：实际就是一个整形空间，记录使用资源的对象的个数，在释放对象后，让最后一个使用资源的对

​					象来释放

```C++
 shared_ptr(const shared_ptr<T>& sp)
     :_ptr(sp._ptr)
     ,_pCount(sp._pCount)	
 {
     if(ptr)
     {
         ++(*_pCount);
     }
 }
```

**释放：**

1.先检测是否有资源

2.有：先给计数-1， 然后检测计数是否为0

3.为0：将资源及计数空间释放

   非0：当前对象不需要释放





**缺陷：**可能会引起循环引用

